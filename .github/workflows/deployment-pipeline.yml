name: Deployment Pipeline

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Run tests first
  test-suite:
    name: Run Test Suite
    uses: ./.github/workflows/test.yml
    secrets: inherit

  # Deploy to preview environment (PR only)
  deploy-preview:
    name: Deploy to Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test-suite
    environment: preview
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build project artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Preview deployed to: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run deployment health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          HEALTH_URL="${{ steps.deploy.outputs.deployment_url }}/api/health"
          echo "Checking health at: $HEALTH_URL"
          
          RETRY_COUNT=0
          MAX_RETRIES=10
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
            
            if curl -f -s --max-time 30 "$HEALTH_URL" | grep -q '"status":"healthy"'; then
              echo "✅ Health check passed - application is healthy"
              SUCCESS=true
              break
            else
              echo "⏳ Health check failed, retrying in 15s..."
              sleep 15
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          if [ "$SUCCESS" != "true" ]; then
            echo "❌ Health check failed after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const deploymentUrl = "${{ steps.deploy.outputs.deployment_url }}";
            const healthStatus = "${{ job.status }}" === "success" ? "✅ Healthy" : "❌ Health check failed";
            
            const body = `## 🚀 Preview Deployment
            
            **Status**: ${{ job.status }}
            **URL**: ${deploymentUrl}
            **Health**: ${healthStatus}
            **Commit**: \`${context.sha.slice(0, 7)}\`
            
            ### Quick Links
            - [Preview App](${deploymentUrl})
            - [Health Check](${deploymentUrl}/api/health)
            - [Logs](https://vercel.com/dashboard/deployments)
            
            ---
            *Deployed automatically from PR #${{ github.event.number }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Deploy to staging environment (main branch only)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test-suite
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: '1.180.0'

      - name: Deploy Supabase changes to staging
        run: |
          echo "Deploying Supabase changes to staging..."
          supabase link --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          supabase db push
          
          if [ -d "supabase/functions" ]; then
            supabase functions deploy --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_STAGING_ACCESS_TOKEN }}

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=staging --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build project artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel Staging
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Staging deployed to: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run staging smoke tests
        run: |
          echo "Running staging smoke tests..."
          sleep 45
          
          STAGING_URL="${{ steps.deploy.outputs.deployment_url }}"
          
          # Health check
          curl -f "$STAGING_URL/api/health" || exit 1
          
          # Basic functionality checks
          echo "✅ Staging deployment validated"

      - name: Notify QA team
        run: |
          echo "## 🚀 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Ready for QA" >> $GITHUB_STEP_SUMMARY

  # Deploy to production (releases only)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: test-suite
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Production deployment confirmation
        run: |
          echo "🚨 PRODUCTION DEPLOYMENT INITIATED 🚨"
          echo "Release: ${{ github.event.release.tag_name || 'Manual deployment' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: '1.180.0'

      - name: Deploy Supabase changes to production
        run: |
          echo "Deploying Supabase changes to production..."
          supabase link --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}
          supabase db push
          
          if [ -d "supabase/functions" ]; then
            supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_PROD_ACCESS_TOKEN }}

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build project artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Production deployed to: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run production validation
        run: |
          echo "Running production validation..."
          sleep 60
          
          PRODUCTION_URL="${{ steps.deploy.outputs.deployment_url }}"
          
          # Health check
          if ! curl -f "$PRODUCTION_URL/api/health"; then
            echo "❌ Production health check failed"
            exit 1
          fi
          
          # Additional production checks
          echo "✅ Production deployment validated"

      - name: Production deployment notification
        run: |
          echo "## 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ github.event.release.tag_name || 'Manual' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Live" >> $GITHUB_STEP_SUMMARY

  # Deployment status summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-preview, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "## Deployment Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-preview.result }}" != "skipped" ]]; then
            echo "| Preview | ${{ needs.deploy-preview.result }} | Pull request deployment |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-staging.result }}" != "skipped" ]]; then
            echo "| Staging | ${{ needs.deploy-staging.result }} | Main branch deployment |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-production.result }}" != "skipped" ]]; then
            echo "| Production | ${{ needs.deploy-production.result }} | Release deployment |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY