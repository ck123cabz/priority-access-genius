#!/bin/bash
# Generated by cc-statusline (https://www.npmjs.com/package/@chongdashu/cc-statusline)
# Custom Claude Code statusline - Created: 2025-08-20T00:06:23.902Z
# Theme: detailed | Colors: true | Features: directory, git, model, context

input=$(cat)
log_debug "Input received: ${#input} characters"

log_debug "Color state: use_color=$use_color, NO_COLOR=${NO_COLOR:-unset}, TTY test: $([ -t 1 ] && echo 'yes' || echo 'no')"

# ---- basics ----
if command -v jq >/dev/null 2>&1; then
  log_debug "jq found, parsing JSON input"
  current_dir=$(echo "$input" | jq -r '.workspace.current_dir // .cwd // "unknown"' 2>/dev/null | sed "s|^$HOME|~|g")
  model_name=$(echo "$input" | jq -r '.model.display_name // "Claude"' 2>/dev/null)
  model_version=$(echo "$input" | jq -r '.model.version // ""' 2>/dev/null)
  session_id=$(echo "$input" | jq -r '.session_id // ""' 2>/dev/null)
  log_debug "Parsed: dir=${current_dir:-}, model=${model_name:-}, version=${model_version:-}, session=${session_id:-}"
else
  log_debug "jq not found, using defaults"
  current_dir="unknown"
  model_name="Claude"; model_version=""
  session_id=""
fi

# ---- color helpers (force colors for Claude Code) ----
# Force colors for Claude Code statusline (Claude Code doesn't pass TTY)
use_color=1
# Only disable if NO_COLOR is explicitly set
[ -n "$NO_COLOR" ] && use_color=0

C() { if [ "$use_color" -eq 1 ]; then printf '\033[%sm' "$1"; fi; }
RST() { if [ "$use_color" -eq 1 ]; then printf '\033[0m'; fi; }

# ---- basic colors ----
dir_color() { if [ "$use_color" -eq 1 ]; then printf '\033[1;36m'; fi; }    # bold cyan
model_color() { if [ "$use_color" -eq 1 ]; then printf '\033[1;35m'; fi; }  # bold magenta  
version_color() { if [ "$use_color" -eq 1 ]; then printf '\033[1;33m'; fi; } # bold yellow
rst() { if [ "$use_color" -eq 1 ]; then printf '\033[0m'; fi; }

# git utilities
num_or_zero() { v="$1"; [[ "$v" =~ ^[0-9]+$ ]] && echo "$v" || echo 0; }

# ---- git colors ----
git_color() { if [ "$use_color" -eq 1 ]; then printf '\033[1;32m'; fi; }
rst() { if [ "$use_color" -eq 1 ]; then printf '\033[0m'; fi; }

# ---- git ----
git_branch=""
if git rev-parse --git-dir >/dev/null 2>&1; then
  git_branch=$(git branch --show-current 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
fi

# ---- context window calculation ----
context_tokens=0; context_pct=0; context_remaining=0

# Determine max context based on model
get_max_context() {
  local model_name="$1"
  case "$model_name" in
    # Claude 3.5 and Claude 4.x models (all have 200K)
    *"Opus 4"*|*"opus 4"*|*"Opus"*|*"opus"*)
      echo "200000"  # 200K for all Opus versions
      ;;
    *"Sonnet 4"*|*"sonnet 4"*|*"Sonnet 3.5"*|*"sonnet 3.5"*|*"Sonnet"*|*"sonnet"*)
      echo "200000"  # 200K for Sonnet 3.5+ and 4.x
      ;;
    *"Haiku 3.5"*|*"haiku 3.5"*|*"Haiku 4"*|*"haiku 4"*|*"Haiku"*|*"haiku"*)
      echo "200000"  # 200K for modern Haiku (3.5+ and 4.x)
      ;;
    # Legacy Claude 3.0 models (smaller context windows)
    *"Claude 3 Haiku"*|*"claude 3 haiku"*)
      echo "100000"  # 100K for original Claude 3 Haiku
      ;;
    # Generic Claude patterns
    *"Claude"*|*"claude"*)
      echo "200000"  # Default to 200K for any Claude model
      ;;
    *)
      echo "200000"  # Default to 200K for unknown models
      ;;
  esac
}

MAX_CONTEXT=$(get_max_context "$model_name")
log_debug "Model: $model_name, Max context: $MAX_CONTEXT"

# Progress bar function for context remaining
context_progress_bar() {
  local remaining_pct="$1"
  local width="$2"
  # Clamp percentage to 0-100
  [ "$remaining_pct" -lt 0 ] && remaining_pct=0
  [ "$remaining_pct" -gt 100 ] && remaining_pct=100
  
  local filled=$(( remaining_pct * width / 100 ))
  local empty=$(( width - filled ))
  
  # Use different characters: ■ for remaining, □ for used
  printf '%*s' "$filled" '' | tr ' ' '■'
  printf '%*s' "$empty" '' | tr ' ' '□'
}

if [ -n "$session_id" ] && command -v jq >/dev/null 2>&1; then
  # Convert current dir to session file path
  project_dir=$(echo "$current_dir" | sed "s|~|$HOME|g" | sed 's|/|-|g')
  session_file="$HOME/.claude/projects/${project_dir}/${session_id}.jsonl"
  
  log_debug "Looking for session file: $session_file"
  
  if [ -f "$session_file" ]; then
    # Get the latest token count from the session file
    latest_tokens=$(cat "$session_file" | jq -r 'select(.message.usage) | .message.usage | ((.input_tokens // 0) + (.cache_read_input_tokens // 0))' 2>/dev/null | tail -1)
    
    if [ -n "$latest_tokens" ] && [ "$latest_tokens" -ne 0 ]; then
      context_tokens=$latest_tokens
      context_pct=$(( context_tokens * 100 / MAX_CONTEXT ))
      context_remaining=$(( MAX_CONTEXT - context_tokens ))
      log_debug "Context: tokens=$context_tokens, pct=$context_pct%, remaining=$context_remaining"
    fi
  fi
fi
# ---- session colors (blue/cyan to differentiate from context) ----
session_color() { 
  rem_pct=$(( 100 - session_pct ))
  # Use blue/cyan colors to differentiate from context (green/yellow/red)
  if   (( rem_pct <= 10 )); then SCLR='1;94'  # bright blue
  elif (( rem_pct <= 25 )); then SCLR='1;96'  # bright cyan
  else                          SCLR='1;34'; fi  # blue
  if [ "$use_color" -eq 1 ]; then printf '\033[%sm' "$SCLR"; fi
}

# ---- render statusline ----
# Add reset code at the beginning to override any terminal dim settings
printf '\033[0m'
printf '📁 %s%s%s' "$(dir_color)" "$current_dir" "$(rst)"
# git display
if [ -n "$git_branch" ]; then
  printf '  🌿 %s%s%s' "$(git_color)" "$git_branch" "$(rst)"
fi
printf '  🤖 %s%s%s' "$(model_color)" "$model_name" "$(rst)"
if [ -n "$model_version" ] && [ "$model_version" != "null" ]; then
  printf '  🏷️ %s%s%s' "$(version_color)" "$model_version" "$(rst)"
fi
# context window display
if [ "$context_tokens" -gt 0 ]; then
  # Calculate percentage remaining instead of used
  remaining_pct=$(( 100 - context_pct ))
  
  # Color based on how much is remaining
  if [ "$remaining_pct" -lt 20 ]; then
    if [ "$use_color" -eq 1 ]; then
      context_color=$(printf '\033[1;31m')  # bold red if <20% remaining
    else
      context_color=""
    fi
  elif [ "$remaining_pct" -lt 40 ]; then
    if [ "$use_color" -eq 1 ]; then
      context_color=$(printf '\033[1;33m')  # bold yellow if <40% remaining
    else
      context_color=""
    fi
  else
    if [ "$use_color" -eq 1 ]; then
      context_color=$(printf '\033[1;32m')  # bold green if >40% remaining
    else
      context_color=""
    fi
  fi
  
  # Create context progress bar (showing remaining, not used)
  context_bar=$(context_progress_bar "$remaining_pct" 10)
  
  printf '  🧠 Context Left: %s%d%% [%s]%s' "$context_color" "$remaining_pct" "$context_bar" "$(rst)"
else
  # Show TBD when context info isn't available yet
  if [ "$use_color" -eq 1 ]; then
    context_color=$(printf '\033[1;37m')  # bright white/gray for TBD
  else
    context_color=""
  fi
  printf '  🧠 Context Left: %sTBD%s' "$context_color" "$(rst)"
fi
printf '\\n'
